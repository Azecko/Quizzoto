import { getSession, useSession } from 'next-auth/react';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Box from '@mui/material/Box';
import { Button, CircularProgress } from '@mui/material';

import * as React from 'react';
import Checkbox from '@mui/material/Checkbox';
import Header from '@/components/header/header';
import { getUserData } from '../../../lib/users';

export default function Page({ userSession, userData }) {
	const [session, setSession] = useState(userSession);

	const [user, setUser] = useState(userData);
	const [isLoading, setIsLoading] = useState(true);
	const [displayPointsChecked, setDisplayPointsChecked] = useState(false);

	const router = useRouter();

	const windowSize = useWindowSize();

	useEffect(() => {
		setUser(userData);
		setIsLoading(false);
	}, [userData]);

	useEffect(() => {
		setDisplayPointsChecked(userData.displayPoints);
	}, [userData]);

	function useWindowSize() {
		const [windowSize, setWindowSize] = useState({
			width: undefined,
			height: undefined,
		});
		useEffect(() => {
			function handleResize() {
				setWindowSize({
					width: window.innerWidth,
					height: window.innerHeight,
				});
			}
			window.addEventListener('resize', handleResize);
			handleResize();
			return () => window.removeEventListener('resize', handleResize);
		}, []);

		return windowSize;
	}

	const handleChangeDisplayPoints = (event) => {
		setDisplayPointsChecked(event.target.checked);
	};

	return (
		<>
			<Head>
				<title>Quizzoto - Quizz</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
				<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
				<link rel="stylesheet" href="/quizz.css" />
				<link rel="preconnect" href="https://fonts.googleapis.com" />
				<link rel="preconnect" href="https://fonts.gstatic.com" />
				<link href="https://fonts.googleapis.com/css2?family=Anta&family=Bebas+Neue&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet" />
			</Head>
			<main>
				<Header windowWidth={windowSize.width} />

				{windowSize.width < 1200 ? (
					<Box className="box">
						<h1 style={{ marginTop: '15px' }}>Profile</h1>
						{!isLoading ? (
							<>
								<div style={{ width: '100%', display: 'flex', justifyContent: 'center' }}>
									<img src={user.image} alt={user.name} style={{ borderRadius: '50%', width: '50%' }} />
								</div>
								<p>username: {user.username}</p>
								{user.points ? <p>Points: {user.points}</p> : <></>}
								<br />
								{session && session.user.email == user.email ? (
									<>
										<p>company: {user.company}</p>
										<p>Name: {user.name}</p>
										<p>Email: {user.email}</p>
										<p>provider: {user.provider}</p>
									</>
								) : (
									<></>
								)}
								<Button href={'/quizzs/' + user.username} variant="contained">
									Quizz
								</Button>
							</>
						) : (
							<Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', verticalAlign: 'center', height: '100%' }}>
								<CircularProgress />
							</Box>
						)}
					</Box>
				) : (
					<Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2}>
						<Box gridColumn="span 2"></Box>
						<Box gridColumn="span 10" className="box">
							<h1>Profile</h1>
							{!isLoading ? (
								<Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2}>
									<Box gridColumn="span 6">
										<img src={user.image} alt={user.name} style={{ borderRadius: '50%', width: '60%' }} />
									</Box>
									<Box gridColumn="span 6">
										<p>username: {user.username}</p>
										{user.points ? (
											<div style={{ display: 'flex' }}>
												<p>Points: {user.points} </p>
												{session && session.user.email == user.email ? (
													<>
														<Checkbox checked={displayPointsChecked} onChange={handleChangeDisplayPoints} inputProps={{ 'aria-label': 'controlled' }} style={{ marginLeft: '12px' }} />
														<p>Display points </p>
													</>
												) : (
													<></>
												)}
											</div>
										) : (
											<></>
										)}

										<br />

										{session && session.user.email == user.email ? (
											<>
												<p>company: {user.company}</p>
												<p>Name: {user.name}</p>
												<p>Email: {user.email}</p>
												<p>Provider: {user.provider}</p>
												<p style={{ color: 'red' }}>id: {user.id}</p>
											</>
										) : (
											<></>
										)}
										<Button href={'/quizzs/' + user.username} variant="contained">
											Quizz
										</Button>
									</Box>
								</Box>
							) : (
								<Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', verticalAlign: 'center', height: '100%' }}>
									<CircularProgress />
								</Box>
							)}
						</Box>
					</Box>
				)}
			</main>
		</>
	);
}

export async function getServerSideProps(context) {
	const session = await getSession(context);
	const { uid } = context.params;

	let userData = await getUserData(session, uid);

	return {
		props: {
			userSession: session ?? null,
			userData,
		},
	};
}
